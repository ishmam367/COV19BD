# -*- coding: utf-8 -*-
"""CoronaDaily.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ou4Gz13UIm2uSsYqOAvCzXFnxgnc0csx
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt # static data visulization 
import matplotlib.dates as mdates # datetime format 
import seaborn as sns # data visualization 
from datetime import datetime, timedelta
from plotly.offline import iplot,init_notebook_mode
import plotly.express as px 
import plotly.graph_objs as go

def configure_plotly_browser_state():
  import IPython
  display(IPython.core.display.HTML('''
        <script src="/static/components/requirejs/require.js"></script>
        <script>
          requirejs.config({
            paths: {
              base: '/static/base',
              plotly: 'https://cdn.plot.ly/plotly-latest.min.js?noext',
            },
          });
        </script>
        '''))

df= pd.read_csv('april.csv')
df.head()

configure_plotly_browser_state()
init_notebook_mode(connected=False)
x=df[df["Daily new confirmed cases"] != 0]["Date"]
y = df[df["Daily new confirmed cases"] != 0]["Daily new confirmed cases"]
                    


fig = go.Figure()

fig.add_trace(go.Bar(x=x,
                    y = y,
                    textposition = "auto",
                    marker_color='lightsalmon'
                    
                   ))

fig.update_layout(title = dict(text = "Daily new confirmed cases",
                              font_size = 25
                              ),
                 yaxis = dict(title = "Number of cases"),
                 xaxis = dict(title = "Date"))

configure_plotly_browser_state()
init_notebook_mode(connected=False)
x=df[df["Daily new confirmed cases"] != 0]["Date"]
y = df[df["Daily new confirmed cases"] != 0]["Daily new deaths"]
                    


fig = go.Figure()

fig.add_trace(go.Bar(x=x,
                    y = y,
                    textposition = "auto",
                    marker_color='crimson'
                    
                   ))

fig.update_layout(title = dict(text = "Daily new Deaths",
                              font_size = 25
                              ),
                 yaxis = dict(title = "Number of cases"),
                 xaxis = dict(title = "Date"))

configure_plotly_browser_state()
init_notebook_mode(connected=False)
x=df[df["Daily new confirmed cases"] != 0]["Date"]
y = df[df["Daily new confirmed cases"] != 0]["Daily new confirmed cases"]
y1 = df[df["Daily new confirmed cases"] != 0]["Daily new deaths"]


fig = go.Figure()

fig.add_trace(go.Bar(x=x,
                    y = y,
                    name = "Daily confirmed cases",
                    marker_color= 'lightsalmon'
                    ))

fig.add_trace(go.Bar(x=x,
                    y = y1,
                    name = " daily death cases",
                    marker_color='crimson'
                    ))

fig.update_layout(title = dict(text = "Daily confirmed vs Death cases",
                              font_size = 25
                              ),
                 yaxis = dict(title = "Number of cases"),
                 xaxis = dict(title = "Date"))

configure_plotly_browser_state()
init_notebook_mode(connected=False)
x=df[df["Daily new confirmed cases"] != 0]["Date"]
y = df[df["Daily new confirmed cases"] != 0]["Daily new recovered"]
y1 = df[df["Daily new confirmed cases"] != 0]["Daily new deaths"]


fig = go.Figure()

fig.add_trace(go.Bar(x=x,
                    y = y,
                    name = "Daily New Recovered",
                    marker_color= 'lime'
                    ))

fig.add_trace(go.Bar(x=x,
                    y = y1,
                    name = " daily death cases",
                    marker_color='crimson'
                    ))

fig.update_layout(title = dict(text = "Daily recovered vs Death cases",
                              font_size = 25
                              ),
                 yaxis = dict(title = "Number of cases"),
                 xaxis = dict(title = "Date"))

configure_plotly_browser_state()
init_notebook_mode(connected=False)
x=df["Date"]
y= df["Daily New Tests"]
y1 = df["Daily new confirmed cases"]



fig = go.Figure()

fig.add_trace(go.Bar(x=x,
                    y = y,
                    name = "Daily New Test",
                    marker_color= 'royalblue'
                    ))

fig.add_trace(go.Bar(x=x,
                    y = y1,
                    name = "Daily confirmed cases",
                    marker_color='olive'
                    ))

fig.update_layout(title = dict(text = "Daily Tests vs Confirmed Cases",
                              font_size = 25
                              ),
                 yaxis = dict(title = "Number of cases"),
                 xaxis = dict(title = "Date"))

configure_plotly_browser_state()
init_notebook_mode(connected=False)
test = df["Total Tests"].max()
active = df["Active Cases"].max()
confirmed = df["Total confirmed cases"].max()
death = df["Total deaths"].max()
recoverd = df["Total recovered"].max()
x = ["Tests","Confirmed","Active","Recovered", "Death" ]
y = [test,confirmed,active,recoverd, death]

fig = go.Figure()

fig.add_trace(go.Bar(x= x,
                    y = y,
                    marker_color='orange'
                     
                     ))

fig.update_layout(title = dict(text = "Comparision between total Test,Confirmed, Active,Recovered and Death cases"))

configure_plotly_browser_state()
init_notebook_mode(connected=False)
active = df["Active Cases"].max()
confirmed = df["Total confirmed cases"].max()
death = df["Total deaths"].max()
recoverd = df["Total recovered"].max()
x = ["Confirmed","Active","Recovered", "Death" ]
y = [confirmed,active,recoverd, death]

fig = go.Figure()

fig.add_trace(go.Bar(x= x,
                    y = y,
                    marker_color='crimson'
                     
                     ))

fig.update_layout(title = dict(text = "Comparision between total Confirmed, Active,Recovered and Death cases"))