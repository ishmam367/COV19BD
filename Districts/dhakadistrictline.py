# -*- coding: utf-8 -*-
"""DhakaDistrictLine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10A6SC1FlEtQeHo3tx7REzF-ca3M3K6aE
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt # static data visulization 
import matplotlib.dates as mdates # datetime format 
import seaborn as sns # data visualization 
from datetime import datetime, timedelta
from plotly.offline import iplot,init_notebook_mode
import plotly.express as px 
import plotly.graph_objs as go

def configure_plotly_browser_state():
  import IPython
  display(IPython.core.display.HTML('''
        <script src="/static/components/requirejs/require.js"></script>
        <script>
          requirejs.config({
            paths: {
              base: '/static/base',
              plotly: 'https://cdn.plot.ly/plotly-latest.min.js?noext',
            },
          });
        </script>
        '''))

df= pd.read_csv('DhakaCity.csv')

configure_plotly_browser_state()
init_notebook_mode(connected=False)
x=df["Date"]
y = df["Confirmed"]


fig = go.Figure()

fig.add_trace(go.Scatter(x=x,
                    y = y,
                    mode = "lines+markers",
                    marker = dict(size = 10)
                    ))

fig.update_layout(title = dict(text = "Total Confirmed Cases Everyday",
                              font_size = 20
                              ),
                 yaxis = dict(title = "Number of cases"),
                 xaxis = dict(title = "Date"))

configure_plotly_browser_state()
init_notebook_mode(connected=False)
x=df["Date"]
y = df["New"]


fig = go.Figure()

fig.add_trace(go.Scatter(x=x,
                    y = y,
                    mode = "lines+markers",
                    marker = dict(size = 10)
                    ))

fig.update_layout(title = dict(text = "Daily New Cases In Dhaka City",
                              font_size = 20
                              ),
                 yaxis = dict(title = "Number of cases"),
                 xaxis = dict(title = "Date"))